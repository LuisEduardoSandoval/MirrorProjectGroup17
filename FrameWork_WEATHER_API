//be aware this is a direct rip from p5.js and should not be used 
//the organization of this file is not final and is unordered again this is not for use
//PLEASE LOAD INDEX.HTML OR THE PROGRAM WILL NOT FUNCTION//

//Due to argument if(weather && btnOn) please sumbit a valid location before pressing button//


var x, y, w, h; //variables for xpos, ypos, _width, _height as this. not allowed to be called in class methods
var dragging = false;
var rollover = false;
var rlor = false;
var offsetX, offsetY;
var content;
let btnOn = false;




var weather;
var 
api='https://api.openweathermap.org/data/2.5/forecast/daily?q=';
var input;
var apiKey='&appid=ad6e239ec0ac58d0a9836e942aac97eb';
var units='&cnt=16&units=metric';
var canvas;
var minY=[];
var maxY=[];
var evenY=[];
var drop=[];

function setup() {
  createCanvas(windowWidth, windowHeight);

  Tab_Section = new tab_section(windowWidth - 100, height / 2, width, 250); //initialization of tab_Section scaleable* in progress
  x = windowWidth - 100; //must be same values as Tab_Section to prevent errors in button dimension for Tab
  y = height / 2;
  w = width;
  h = 250;

  Top_Section = new top_section(0, 0, windowWidth * 3, windowHeight / 6); //creating new top 
  
  var button = select('#submit');
  button.mousePressed(weatherAsk);
  input = select('#city');
  
  
  
  noStroke(); // no outline
}

function draw() {
  clear();
  background(100);
  //frameRate(30);
  Top_Section.display(); //displays top
  Top_Section.clock(); //renders clock
  Tab_Section.tab_movement(); //allows movement for tab
  Tab_Section.tab_display(); //displays tab
  Tab_Section.applicationbtn(50,50,30,40); //creates button
  //Tab_Section.applicationbtn(50,50,30,100);
  //Tab_Section.applicationbtn(50,50,30,160);
    if (weather && btnOn) 
    {
		var todaytemp = weather.list[0].temp.eve;
    var todayhumidity = weather.list[0].humidity;
    var tomorrowhumidity = weather.list[1].humidity;
    noStroke();
    fill(200,0,255,140);
    ellipse(100, 230,todayhumidity, todayhumidity);
    fill(100,0,255,190);
    ellipse(250, 230,tomorrowhumidity,tomorrowhumidity);
    noStroke();
    line(0,evenY[0]+250,width,evenY[0]+250);
    fill(255);
    noStroke();
    textSize(42);
    text(weather.city.name,0, 80);
    textSize(14);
    text("Forecast: 16 Days/Daily ",0, 320);
    fill(255);
    text("Today:"+floor(todaytemp)+"\u2103",0, minY[0]+310);
    text("Humidity: today VS tomorrow",0, 180);
    
    for(var i=0;i<weather.list.length;i++){
    fill(255,150);
      noStroke();
    textSize(12);
    text(floor(weather.list[i].temp.eve), width*i/16,evenY[i]+260);   
    //stroke(255, 102, 0,30);
      fill(255, 102, 0);
      ellipse(width*i/16+5,evenY[i]+280,5,5);       
    fill(255, 102, 0,10);
    beginShape();
      vertex(0,evenY[0]+250);
      curveVertex(5,evenY[0]+250);
      curveVertex(width*1/16+5,evenY[1]+280);
      curveVertex(width*2/16+5,evenY[2]+280);
      curveVertex(width*3/16+5,evenY[3]+280);
      curveVertex(width*4/16+5,evenY[4]+280);
      curveVertex(width*5/16+5,evenY[5]+280);
      curveVertex(width*6/16+5,evenY[6]+280);
      curveVertex(width*7/16+5,evenY[7]+280);
      curveVertex(width*8/16+5,evenY[8]+280);
      curveVertex(width*9/16+5,evenY[9]+280);
      curveVertex(width*10/16+5,evenY[10]+280);
      curveVertex(width*11/16+5,evenY[11]+280);
      curveVertex(width*12/16+5,evenY[12]+280);
      curveVertex(width*13/16+5,evenY[13]+280);
      curveVertex(width*14/16+5,evenY[14]+280);
      curveVertex(width*15/16+5,evenY[15]+280);
      curveVertex(width,evenY[0]+250);
      vertex(width,evenY[0]+250);
      endShape();
      
     // var checkrain=weather.list[0].weather.main;
     //  var Rain="Rain";
			// console.log(weather.list[i].weather[0].main);
       if (weather.list[i].weather[0].main=="Rain"){
        for (var j = drop.length - 1; j >= 0; j--) {
         drop[j].show();
         drop[j].fall();         
        }//end for loop j
         fill(255,15);
         noStroke();
         textSize(14);
         text("It will rain in the next 16 days.", 0,100); 
         //text("There will be rain in the next"+i+"16 days.", 0,100); 
     }//end if checkrain
    }  
}

}
//start of tab section
class tab_section 
{
  //the constructor
  constructor(
    xpos,
    ypos,
    _width,
    _height //constructor(x position, y position, width, height)
  ) {
    this.xpos = xpos;
    this.ypos = ypos;
    this._width = _width;
    this._height = _height;
    this.color = 'grey';
  }

  //functions

  tab_movement() {
    if (  //if the mouse is inside the bounding box
      mouseX > this.xpos &&
      mouseX < this.xpos + this._width &&
      mouseY > this.ypos &&
      mouseY < this.ypos + this._height
    ) {
      //if so rollover is true
      rollover = true;
    } else {
      //if not rollover is false
      rollover = true;
    }
    if (dragging) {
      if (mouseX + offsetX < windowWidth || mouseX + offsetX > 0) {
        x = mouseX + offsetX;
      }
      if (mouseX + offsetX > windowWidth - 100) {
        x = windowWidth - 100; // starting position
      }
      if (mouseX + offsetX < windowWidth - 502) {
        x = windowWidth - 500;
      }
    }      
  }
  tab_display() //displays tab
  {
    fill(70, 70, 70, 255);
    
    ellipse(x+40,y+40,80,80);
    ellipse(x+40,y+210,80,80);
    rect(x,y+45,100,170);
    rect(x+40,y,w,h);
    fill(0,0,0,0);
    rect(x,y,w,h);
  }
  
  applicationbtn(appH,appW, offsetappX,offsetappY) //creates new buttons
  {
    var appX,appY; //positions
    
    this.appH = appH;
    this.appW = appW;
    this.xpos = x+offsetappX;
    this.ypos = y+offsetappY;
    
    
    if ( //is the mouse inside the button?
          mouseX > this.xpos &&
          mouseX < this.xpos + this.appW &&
          mouseY > this.ypos &&
          mouseY < this.ypos + this.appH
        ) 
    {
      rlor = true;//is mouse hovered over box? if yes true
    }
    else 
    {
      rlor = false; //if mouse isn't on button false
    }
    if(rlor) //when the mouse is hovered arguments inside
    {
      fill(0,99,0); //change color green
    }
    else //if the mouse is not on the box
    {
      fill(255);
    }    

    if(btnOn) //if the button is on  arguements inside
    {
      fill(255);
      //ellipse(200,200,100,100);
      //ellipse(200,300,100,100);
      
      //fill(200,10,80);
      //ellipse(500,250,100,100);
      //fill(255);
      //rect(200,200,300,100);
      //text("hello",100,100);
      fill(40,40,40,255);
      rect(0,0,windowWidth,windowHeight);
      fill(255);
      Tab_Section.tab_display();
      fill(255);
      rect(this.xpos,this.ypos,appH,appW);
      
    }

    rect(this.xpos,this.ypos,appH,appW); //button rectangle
    
  }
  




}//end of tab_section



class top_section {
  //class for upper section to contain time and date
  constructor(xpos, ypos, _width, _height) {
    this.xpos = xpos;
    this.ypos = ypos;
    this._width = _width;
    this._height = _height;
    this.color = 'grey';
  }

  //functions
  display() {
    fill(70, 70, 70, 255);
    rect(this.xpos, this.ypos, this._width, this._height);
  }
  clock() {
    var h, m;
    var d;
    var weekdayStr, weekday;
    var TimeDesignation;
    var date;

    h = hour();
    m = minute();
    d = day();

    if (hour() > 12) {
      TimeDesignation = 'PM';
      h = h - 12;
    } else {
      TimeDesignation = 'AM';
    }

    //conversion here
    date = new Date();
    weekday = date.getDay();

    if (weekday == 0) {
      weekdayStr = 'SUN';
    }
    if (weekday == 1) {
      weekdayStr = 'MON';
    }
    if (weekday == 2) {
      weekdayStr = 'TUE';
    }
    if (weekday == 3) {
      weekdayStr = 'WED';
    }
    if (weekday == 4) {
      weekdayStr = 'THU';
    }
    if (weekday == 5) {
      weekdayStr = 'FRI';
    }
    if (weekday == 6) {
      weekdayStr = 'SAT';
    }

    textSize((windowHeight * windowWidth) / (windowHeight * 16));
    fill(255, 255, 255);

    text(h + ':' + nf(m, 2) + ' ', windowWidth / 1.25, windowHeight / 12);
    textSize((windowHeight * windowWidth) / (windowHeight * 42));
    text(TimeDesignation, windowWidth / 1.05, windowHeight / 22);
    textSize((windowHeight * windowWidth) / (windowHeight * 25));
    text(weekdayStr + ' OCTOBER ' + d, windowWidth / 1.55, windowHeight / 6.75);
    //date
    //text(weekdayStr + "OCTOBER" + nf(d),100,480);
  }
} //end of top_section

//mouse functions


// function create function here
function mouseReleased()  //if mouse is released over a specific box
{
  // Quit dragging
  dragging = false;
  if(rlor == true)//arguments for application button if mouse over button and is true execute
  {
    btnOn = !btnOn; // switch to turn button on and off
  }
}



function mousePressed() {
  // Did I click on the rectangle?
  if (mouseX > x && mouseX < x + w && mouseY > y && mouseY < y + h) {
    dragging = true;
    // If so, keep track of relative location of click to corner of rectangle
    offsetX = x - mouseX;
    //offsetY = y-mouseY;
  }
  if (offsetX == 0) {
    x = windowWidth - 100; // starting position
  }
}



function windowResized()  //arguments for resizing window
{
  resizeCanvas(windowWidth, windowHeight); 
  Tab_Section = new tab_section(windowWidth - 100, height / 2, width, 250);

  x = windowWidth - 100;
  y = height / 2;
  w = width * 2;
  h = 250;
  Top_Section = new top_section(0, 0, windowWidth * 3, windowHeight / 6);
}

function weatherAsk() {
 
  var url = api + input.value() + apiKey + units;
  loadJSON(url, gotData);
  console.log(url);
}

function gotData(data) {
  
  weather = data;
  for(var i=0;i<weather.list.length;i++){
  var mintemp=weather.list[i].temp.min;
  var maxtemp=weather.list[i].temp.max;
  var eventemp=weather.list[i].temp.eve;
  minY[i]=map(mintemp,-5,40,height*0.8,0);
  maxY[i]=map(maxtemp,-5,40,height*0.8,0);
  evenY[i]=map(eventemp,-5,40,height*0.8,0);
  }
  
  for (var j = 0; j < 100; j++) {
    drop[j] = new Drop();
  }
}
function Drop() {
  this.x = random(0, width);
  this.y = random(-1000, 0);
  this.show = function() {
    stroke(255,15);
    line(this.x, this.y, this.x, this.y+10);
     if(this.y>height){
      this.y=0;
    }
  }; 
  this.fall = function() {
    this.y = this.y + 1;
  };
}
